generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                @id @default(autoincrement())
  email                   String             @unique
  role                    Role               @default(USER)
  phone                   String?            @unique
  password                String
  fitbitAccessToken       String?
  fitbitRefreshToken      String?
  fitbitAccessTokenExpiry DateTime?
  isAgreeTerms            Boolean?           @default(false)
  otp                     String?
  otpExpiry               DateTime?
  isDeleted               Boolean            @default(false)
  changePasswordAt        DateTime?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @default(now()) @updatedAt
  chats                   Chat[]             @relation("ChatSender")
  conversations           Conversation[]
  deviceIntegration       DeviceIntegration?
  labReports              LabReport[]
  meals                   Meal[]
  notification            Notification?
  nudges                  Nudge[]
  profile                 Profile?
  tips                    Tip[]
  vitalSigns              VitalSigns?
}

model Profile {
  id                   Int         @id @default(autoincrement())
  userId               Int         @unique
  photo                String?
  fullName             String?
  isEnableNotification Boolean?    @default(false)
  language             Language?   @default(EN)
  dateOfBirth          DateTime?
  gender               Gender?
  height               String?
  weight               String?
  healthGoal           HealthGoal?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt
  user                 User        @relation(fields: [userId], references: [id])
}

model Notification {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  activityReminders  Boolean   @default(false)
  mealTracking       Boolean   @default(false)
  sleepInsights      Boolean   @default(false)
  progressUpdates    Boolean   @default(false)
  waterIntake        Boolean   @default(false)
  motivationalNudges Boolean   @default(false)
  wellnessTips       Boolean   @default(false)
  personalizedTips   Boolean   @default(false)
  systemAlerts       Boolean   @default(false)
  doNotDisturb       Boolean   @default(false)
  doNotDisturbStart  DateTime?
  doNotDisturbEnd    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

model DeviceIntegration {
  id                      Int       @id @default(autoincrement())
  userId                  Int       @unique
  appleHealth_isConnected Boolean   @default(false)
  appleHealth_lastSync    DateTime?
  googleFit_isConnected   Boolean   @default(false)
  googleFit_lastSync      DateTime?
  fitbit_isConnected      Boolean   @default(false)
  fitbit_lastSync         DateTime?
  strava_isConnected      Boolean   @default(false)
  strava_lastSync         DateTime?
  auto_sync               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt
  user                    User      @relation(fields: [userId], references: [id])
}

model Nudge {
  id           Int           @id @default(autoincrement())
  userId       Int
  title        String
  category     NudgeCategory
  targetAmount Float? // e.g., 8 for sleep hours, 8800 for steps, 2500 for hydration ml (daily target)
  unit         String? // e.g., "hours", "steps", "ml", "kg"
  date         DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  isDeleted    Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id])
  tips         Tip[]
}

model VitalSigns {
  id         Int                @id @default(autoincrement())
  userId     Int                @unique
  dataFrom   String
  additional AdditionalMetrics?
  heartRate  HeartRate?
  sleep      Sleep?
  step       Step?
  user       User               @relation(fields: [userId], references: [id])
}

model HeartRate {
  id        Int      @id @default(autoincrement())
  vitalId   Int      @unique
  heartRate Int?
  updatedAt DateTime @default(now()) @updatedAt

  resting String?
  average String?
  peak    String?
  message String?
  vital   VitalSigns @relation(fields: [vitalId], references: [id])
}

model Step {
  id         Int        @id @default(autoincrement())
  vitalId    Int        @unique
  stepsCount Int
  distance   Int
  calories   Int
  activeMin  Int
  message    String?
  vital      VitalSigns @relation(fields: [vitalId], references: [id])
}

model Sleep {
  id           Int        @id @default(autoincrement())
  vitalId      Int        @unique
  sleepStartAt DateTime
  sleepEndAt   DateTime
  deep         String?
  rem          String?
  light        String?
  message      String?
  vital        VitalSigns @relation(fields: [vitalId], references: [id])
}

model AdditionalMetrics {
  id                   Int        @id @default(autoincrement())
  vitalId              Int        @unique
  heartRateVariability Int
  bodyTemp             Int
  respiratoryRate      Int
  vital                VitalSigns @relation(fields: [vitalId], references: [id])
}

model Meal {
  id        Int      @id @default(autoincrement())
  userId    Int
  photo     String?
  name      String
  mealType  String
  note      String?
  calories  String?
  protein   String?
  carbs     String?
  fats      String?
  time      String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model LabReport {
  id     Int     @id @default(autoincrement())
  userId Int
  photo  String?
  user   User    @relation(fields: [userId], references: [id])
  tips   Tip[]
}

model Tip {
  id          Int        @id @default(autoincrement())
  userId      Int
  labReportId Int?
  nudgesId    Int?
  type        TipType
  message     String
  riskLevel   RiskLevel
  createdAt   DateTime   @default(now())
  labReport   LabReport? @relation(fields: [labReportId], references: [id])
  nudges      Nudge?     @relation(fields: [nudgesId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  chats     Chat[]
  user      User     @relation(fields: [userId], references: [id])
}

model Chat {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  type           MessageType
  content        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("ChatSender", fields: [senderId], references: [id])
}

enum Language {
  EN
  BN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  OTHER // For any future types
}

enum HealthGoal {
  LOSE_WEIGHT
  BUILD_MUSCLE
  MAINTAIN_HEALTH
  IMPROVE
}

enum TipType {
  LAB_REPORT
  NUDGES
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  USER
  ADMIN
}

enum NudgeCategory {
  HYDRATION
  SLEEP
  MOVEMENT
  WEIGHT
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  OTHER
}
