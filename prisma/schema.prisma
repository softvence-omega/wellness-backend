generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(cuid()) // Changed to CUID
  email                   String             @unique
  role                    Role               @default(USER)
  phone                   String?            @unique
  password                String?
  refreshToken            String?
  fitbitAccessToken       String?
  fitbitRefreshToken      String?
  fitbitAccessTokenExpiry DateTime?
  stravaAccessToken       String?
  stravaRefreshToken      String?
  stravaAccessTokenExpiry DateTime?
  isAgreeTerms            Boolean            @default(false)
  otp                     String?
  otpExpiry               DateTime?
  isDeleted               Boolean            @default(false)
  changePasswordAt        DateTime?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @default(now()) @updatedAt
  chats                   Chat[]             @relation("ChatSender")
  conversations           Conversation[]
  deviceIntegration       DeviceIntegration?
  labReports              LabReport[]
  meals                   Meal[]
  notification            Notification?
  nudges                  Nudge[]
  profile                 Profile?
  tips                    Tip[]
  HealthDatas            HealthData[]
  // vitalSigns              VitalSigns?
  emotionEntries       EmotionEntry[]
  MedicalReports       MedicalReport[]

  @@index([createdAt])
}

model Profile {
  id                   String      @id @default(cuid()) // Changed to CUID
  userId               String      @unique // Changed to String
  photo                String?
  fullName             String?
  isEnableNotification Boolean     @default(false)
  language             Language    @default(EN)
  dateOfBirth          DateTime?
  gender               Gender?
  height               Float?
  weight               Float?
  healthGoal           HealthGoal?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt
  user                 User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmotionEntry {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emoji     String
  emotion   String
  note      String?
  intensity Int?      @default(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([emoji])
}

model Notification {
  id                 String    @id @default(cuid()) // Changed to CUID
  userId             String    @unique // Changed to String
  activityReminders  Boolean   @default(false)
  mealTracking       Boolean   @default(false)
  sleepInsights      Boolean   @default(false)
  progressUpdates    Boolean   @default(false)
  waterIntake        Boolean   @default(false)
  motivationalNudges Boolean   @default(false)
  wellnessTips       Boolean   @default(false)
  personalizedTips   Boolean   @default(false)
  systemAlerts       Boolean   @default(false)
  doNotDisturb       Boolean   @default(false)
  doNotDisturbStart  DateTime?
  doNotDisturbEnd    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model DeviceIntegration {
  id                      String    @id @default(cuid()) // Changed to CUID
  userId                  String    @unique // Changed to String
  appleHealth_isConnected Boolean   @default(false)
  appleHealth_lastSync    DateTime?
  googleFit_isConnected   Boolean   @default(false)
  googleFit_lastSync      DateTime?
  fitbit_isConnected      Boolean   @default(false)
  fitbit_lastSync         DateTime?
  strava_isConnected      Boolean   @default(false)
  strava_lastSync         DateTime?
  auto_sync               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt
  user                    User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Nudge {
  id             String        @id @default(cuid()) // Changed to CUID
  userId         String        // Changed to String
  title          String
  category       NudgeCategory
  targetAmount   Float?
  consumedAmount Float?
  unit           String?
  date           DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  isDeleted      Boolean       @default(false)
  user           User          @relation(fields: [userId], references: [id])
  tips           Tip[]

  @@index([userId, category])
  @@index([date])
}

model HealthData {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core Health Metrics from Apple Watch
  steps          Int?
  heartRate      Float?
  activeCalories Float?
  restingHeartRate Float?
  heartRateVariability Float?
  
  
  // Sleep Data (detailed from Apple Watch)
  sleepData      SleepData?
  
  // Workout Data
  workoutData    WorkoutData?
  
  // Apple HealthKit Metadata
  dataSource     String?       // "com.apple.health"
  deviceName     String?       // "Apple Watch"
  syncSessionId  String?       // For tracking sync sessions
  
  // Data Quality Flags
  isManualEntry  Boolean       @default(false)
  dataQuality    DataQuality   @default(GOOD)
  
  // Timestamps
  startTime      DateTime      // When the data recording started
  endTime        DateTime      // When the data recording ended
  fetchTime      DateTime      @default(now()) // When we synced the data
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId])
  @@index([startTime])
  @@index([endTime])
  @@index([fetchTime])
  @@index([dataSource])
  @@unique([userId, startTime, endTime, dataSource]) // Prevent duplicate syncs
}

model SleepData {
  id             String      @id @default(cuid())
  healthDataId   String      @unique
  healthData     HealthData  @relation(fields: [healthDataId], references: [id], onDelete: Cascade)
  
  // Detailed Sleep Stages from Apple Watch
  deepMinutes    Float?
  lightMinutes   Float?
  remMinutes     Float?
  awakeMinutes   Float?
  coreMinutes    Float?
  
  // Sleep Quality Metrics
  sleepEfficiency Float?     // Percentage of time actually asleep
  timeInBed       Float?     // Total time in bed (minutes)
  sleepLatency    Float?     // Time to fall asleep (minutes)
  
  // Apple Watch Specific
  bedtimeStart    DateTime?
  bedtimeEnd      DateTime?
  consistency     Float?     // Sleep schedule consistency
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([healthDataId])
}

model WorkoutData {
  id             String          @id @default(cuid())
  healthDataId   String          @unique
  healthData     HealthData      @relation(fields: [healthDataId], references: [id], onDelete: Cascade)
  
  // Workout Information
  workoutType    WorkoutType?
  duration       Float?          // in minutes
  totalDistance  Float?          // in meters
  totalEnergy    Float?          // calories burned
  
  // Heart Rate during workout
  avgHeartRate   Float?
  maxHeartRate   Float?
  minHeartRate   Float?
  
  // GPS Data
  elevation      Float?
  routeData      Json?           // GPS coordinates
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([healthDataId])
}

model MedicalReport {
  id          String     @id @default(cuid())
  fileName    String     @unique @map("file_name")
  fileUrl     String     @map("file_url")
  reportType  ReportType @map("report_type")
  patientName String     @map("patient_name")
  reportDate  DateTime   @map("report_date")
  labName     String?    @map("lab_name")
  doctorName  String?    @map("doctor_name")
  reportData  Json       @map("report_data") // Stores the structured lab values
  userId      String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  tips       Tip[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medical_reports")
  @@index([userId])
  @@index([patientName])
  @@index([reportType])
  @@index([reportDate])
}

// model VitalSigns {
//   id         String             @id @default(cuid()) // Changed to CUID
//   userId     String             @unique // Changed to String
//   dataFrom   String
//   additional AdditionalMetrics?
//   heartRate  HeartRate?
//   sleep      Sleep?
//   step       Step?
//   user       User               @relation(fields: [userId], references: [id])

//   @@index([userId])
// }

// model HeartRate {
//   id        String     @id @default(cuid()) // Changed to CUID
//   vitalId   String     @unique // Changed to String
//   heartRate Int?
//   updatedAt DateTime   @default(now()) @updatedAt
//   resting   Int?
//   average   Int?
//   peak      Int?
//   message   Json?
//   vital     VitalSigns @relation(fields: [vitalId], references: [id])

//   @@index([vitalId])
// }

// model Step {
//   id         String     @id @default(cuid()) // Changed to CUID
//   vitalId    String     @unique // Changed to String
//   stepsCount Int
//   distance   Float?
//   calories   Float?
//   activeMin  Int?
//   message    Json?
//   vital      VitalSigns @relation(fields: [vitalId], references: [id])

//   @@index([vitalId])
// }

// model Sleep {
//   id           String     @id @default(cuid()) // Changed to CUID
//   vitalId      String     @unique // Changed to String
//   sleepStartAt DateTime
//   sleepEndAt   DateTime
//   deep         Float?
//   rem          Float?
//   light        Float?
//   message      Json?
//   vital        VitalSigns @relation(fields: [vitalId], references: [id])

//   @@index([vitalId])
// }

model AdditionalMetrics {
  id                   String     @id @default(cuid()) // Changed to CUID
  heartRateVariability Int
  bodyTemp             Float
  respiratoryRate      Int
}

model Meal {
  id          String    @id @default(cuid()) // Changed to CUID
  userId      String    // Changed to String
  photo       String?
  name        String
  mealType    MealType
  isCompleted Boolean   @default(false)
  description  String?
  note        String?
  calories    Float?
  protein     Float?
  carbs       Float?
  fats        Float?
  time        DateTime?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId, mealType])
  @@index([createdAt])
}

model LabReport {
  id     String    @id @default(cuid()) // Changed to CUID
  userId String    // Changed to String
  photo  String?
  user   User      @relation(fields: [userId], references: [id])
  tips   Tip[]

  @@index([userId])
}

model Tip {
  id          String     @id @default(cuid()) // Changed to CUID
  userId      String     // Changed to String
  labReportId String?    // Changed to String
  nudgesId    String?    // Changed to String
  type        TipType
  message     String
  medicalReportId   String?
  medicalReport   MedicalReport? @relation(fields: [medicalReportId], references: [id])
  riskLevel   RiskLevel
  createdAt   DateTime   @default(now())
  labReport   LabReport? @relation(fields: [labReportId], references: [id])
  nudges      Nudge?     @relation(fields: [nudgesId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([labReportId])
  @@index([nudgesId])
}

model Conversation {
  id        String    @id @default(cuid()) // Changed to CUID
  title     String
  userId    String    // Changed to String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  chats     Chat[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Chat {
  id             String       @id @default(cuid()) // Changed to CUID
  conversationId String       // Changed to String
  senderId       String       // Changed to String
  type           MessageType
  content        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("ChatSender", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([createdAt])
}

enum Language {
  EN
  BN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  OTHER
}

enum HealthGoal {
  LOSE_WEIGHT
  BUILD_MUSCLE
  MAINTAIN_HEALTH
  IMPROVE
}

enum TipType {
  LAB_REPORT
  NUDGES
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  USER
  ADMIN
}

enum NudgeCategory {
  HYDRATION
  SLEEP
  MOVEMENT
  WEIGHT
  OTHER
}

// enum MealType {
//   BREAKFAST
//   LUNCH
//   DINNER
//   SNACK
//   OTHER
// }
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  PRE_WORKOUT
  POST_WORKOUT
  OTHER
}

enum DataQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
  UNKNOWN
}

enum WorkoutType {
  WALKING
  RUNNING
  CYCLING
  SWIMMING
  HIKING
  YOGA
  STRENGTH_TRAINING
  HIGH_INTENSITY_INTERVAL_TRAINING
  DANCE
  FUNCTIONAL_STRENGTH_TRAINING
  TRADITIONAL_STRENGTH_TRAINING
  CARDIO
  MIXED_CARDIO
  OTHER
}

enum ReportType {
  CBC
  LFT
  KFT
  THYROID
  MRI
  CT_SCAN
  X_RAY
  ULTRASOUND
  ECG
  BLOOD_TEST
  URINE_TEST
  OTHER
}